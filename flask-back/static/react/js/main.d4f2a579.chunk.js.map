{"version":3,"sources":["MenuBar.js","ResortRanking.js","InputFields.js","ResultScroll.js","App.js","serviceWorker.js","index.js"],"names":["MenuBar","Component","ResortRanking","InputFields","ResultScroll","App","useState","latitude","longitude","width","height","zoom","viewport","setViewport","className","mapboxApiAccessToken","mapStyle","onViewportChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kQAQeA,E,uKAJX,OAAO,mD,GAFWC,aCMPC,E,uKAJX,OAAO,sD,GAFiBD,aCMbE,E,uKAJX,OAAO,uD,GAFeF,aCMXG,E,uKAJX,OAAO,wD,GAFgBH,a,QCgDZI,MA1Cf,WAAgB,IAAD,EACmBC,mBAAS,CACvCC,SAAU,QACVC,WAAY,SACZC,MAAO,OACPC,OAAQ,OACRC,KAAM,KANK,mBACNC,EADM,KACIC,EADJ,KAYb,OACE,yBAAKC,UAAU,WACb,yBAAKA,UAAU,cACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,aACb,kBAAC,IAAD,iBACOF,EADP,CAEEG,qBAZU,wGAaVC,SAZW,6DAaXC,iBAAkB,SAAAL,GAChBC,EAAYD,QAIlB,yBAAKE,UAAU,uBACb,kBAAC,EAAD,QAGJ,yBAAKA,UAAU,iBACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,mBACb,kBAAC,EAAD,SChCYI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"js/main.d4f2a579.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass MenuBar extends Component {\r\n  render() {\r\n    return <h1>Menu Bar Filler</h1>;\r\n  }\r\n}\r\n\r\nexport default MenuBar;\r\n","import React, { Component } from \"react\";\r\n\r\nclass ResortRanking extends Component {\r\n  render() {\r\n    return <h1>Resort Rank Filler</h1>;\r\n  }\r\n}\r\n\r\nexport default ResortRanking;\r\n","import React, { Component } from \"react\";\r\n\r\nclass InputFields extends Component {\r\n  render() {\r\n    return <h1>Input Fields Filler</h1>;\r\n  }\r\n}\r\n\r\nexport default InputFields;\r\n","import React, { Component } from \"react\";\r\n\r\nclass ResultScroll extends Component {\r\n  render() {\r\n    return <h1>Result Scroll Filler</h1>;\r\n  }\r\n}\r\n\r\nexport default ResultScroll;\r\n","import React, { useState } from \"react\";\nimport \"./index.css\";\nimport MenuBar from \"./MenuBar\";\nimport ResortRanking from \"./ResortRanking\";\nimport InputFields from \"./InputFields\";\nimport ResultScroll from \"./ResultScroll\";\nimport ReactMapGL from \"react-map-gl\";\n\nfunction App() {\n  const [viewport, setViewport] = useState({\n    latitude: 43.6515,\n    longitude: -116.2023,\n    width: \"80vw\",\n    height: \"45vh\",\n    zoom: 10\n  });\n\n  const mapBoxToken = \"pk.eyJ1IjoiZXJpYy1wZXRlcnNvbjE3NSIsImEiOiJja2ZvbDcyemUwMWlrMnJudTNtd2F0a2VnIn0.423dDz6mycUHod5Y2rjWKg\";\n  const mapStyleLink = \"mapbox://styles/eric-peterson175/ckfolrv1v07u91anrzyhk4jhd\";\n\n  return (\n    <div className=\"mainDiv\">\n      <div className=\"menuBarDiv\">\n        <MenuBar />\n      </div>\n      <div className=\"mapAndResortDiv\">\n        <div className=\"mapColumn\">\n          <ReactMapGL\n            {... viewport}\n            mapboxApiAccessToken={mapBoxToken}\n            mapStyle={mapStyleLink}\n            onViewportChange={viewport => {\n              setViewport(viewport);\n            }}>\n          </ReactMapGL>\n        </div>\n        <div className=\"resortRankingColumn\">\n          <ResortRanking />\n        </div>\n      </div>\n      <div className=\"inputFieldDiv\">\n        <InputFields />\n      </div>\n      <div className=\"resultScrollDiv\">\n        <ResultScroll />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}